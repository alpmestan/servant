name:                servant
version:             0.1.0.0
synopsis:            A library to generate REST-style webservices on top of scotty, handling all the boilerplate for you
description:         
  An abstraction for 'Resource's that can support any number
  of operations, which will be tagged at the type-level.
  .
  Here's a specification for a 'Person' resource, from which we can generate a scotty webapp:
  .
  > personResource = 
  >   mkResourceAt "/persons" "personid" withPGConnection
  >     & addWith addPerson
  >     & listWith listPersons
  >     & deleteWith deletePerson
  .
  provided you have 'addPerson', 'listPersons' and 'deletePerson',
  as described in "Servant.Operation", and withPGConnection should
  be a function using a connection or connection pool or any kind of such
  /context/ that you have set up previously.
  .
  You can then turn this into a (JSON-based) scotty webservice
  by simply doing:
  .
  > personService :: Service Text IO
  > personService =
  >   emptyService
  >     & resource personResource
  > 
  > personHandler :: Text -> ActionM ()
  > personHandler err = do
  >   status status400
  >   json err
  >
  > main :: IO ()
  > main = do
  >   print personResource
  >   scotty 3000 $ runService personService personHandler
  .
  > $ cabal run
  > Resource at: /persons
  >   Indexed by key: personid
  >   Supports:
  >     - Add
  >     - Delete
  >     - List
  >
  > Setting phasers to stun... (port 3000) (ctrl-c to quit)
  .
  * "Servant.Resource" contains the abstraction for a Resource
  * "Servant.Operation" shows you what an operation is, what operations
    are provided out of the box, and how you can define your owns.
  * "Servant.Context" contains the abstraction for things like database connections
    , handles, etc.
  * "Servant.Response" contains everything related to getting the response of your
    database or the like transformed into a suitable JSON value
  * "Servant.Service" lets you build up a webservice composed of several resources
    and reexports all the other modules so that you just have to:
    .
    > import Servant.Service
    .
    to get started with /servant/.
homepage:            http://github.com/zalora/servant
license:             BSD3
license-file:        LICENSE
author:              Alp Mestanogullari
maintainer:          alp@zalora.com
copyright:           2014 Zalora SEA
category:            Web
build-type:          Simple
extra-source-files:  example/items.hs
cabal-version:       >=1.10

library
  exposed-modules:
      Servant.Context
    , Servant.Error
    , Servant.Operation
    , Servant.Resource
  build-depends:
    base >=4 && <5,
    transformers >= 0.2,
    text >= 1.0
  hs-source-dirs:      src
  default-language:    Haskell2010
  ghc-options:         -O2 -Wall

executable servant-items
  main-is: items.hs
  hs-source-dirs:      example
  build-depends:
    base >= 4 && <5,
    text >= 1.0,
    scotty,
    aeson,
    servant,
    http-types,
    containers >= 0.5

  ghc-options:         -O2 -Wall
  default-language:    Haskell2010
